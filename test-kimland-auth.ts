// Script de test pour v√©rifier l'authentification Kimland
// Fichier: test-kimland-auth.ts

import { KimlandService } from './src/services/kimland/kimland.service';
import { logger } from './src/utils/logger';

async function testKimlandAuthentication() {
  const kimlandService = new KimlandService();

  console.log('üîß Test de l\'authentification Kimland...\n');

  try {
    // Test 1: V√©rification du statut initial
    const initialConnection = await kimlandService.checkConnection();
    console.log(`üìä Statut initial: ${initialConnection ? '‚úÖ Connect√©' : '‚ùå Non connect√©'}`);

    // Test 2: Forcer une nouvelle authentification
    console.log('üîê Test d\'authentification...');
    const authResult = await kimlandService.forceLogin();
    
    if (authResult.success) {
      console.log('‚úÖ Authentification r√©ussie !');
    } else {
      console.log(`‚ùå √âchec authentification: ${authResult.error}`);
      return;
    }

    // Test 3: V√©rifier le statut apr√®s login
    const postLoginConnection = await kimlandService.checkConnection();
    console.log(`üìä Statut apr√®s login: ${postLoginConnection ? '‚úÖ Connect√©' : '‚ùå Non connect√©'}`);

    // Test 4: Test d'un produit (si SKU disponible)
    const testSku = 'TEST-SKU-001'; // Remplacez par un SKU r√©el
    console.log(`üîç Test recherche produit: ${testSku}`);
    const productInfo = await kimlandService.getProductInfo(testSku);
    
    if (productInfo.found && productInfo.product) {
      console.log('‚úÖ Produit trouv√© !');
      console.log(`   Nom: ${productInfo.product.name}`);
      console.log(`   Prix: ${productInfo.product.price}`);
      console.log(`   Variants: ${productInfo.product.variants.length}`);
    } else {
      console.log(`‚ö†Ô∏è Produit non trouv√©: ${productInfo.error || 'Aucune raison sp√©cifi√©e'}`);
    }

    // Test 5: Statistiques de session
    const sessionStats = await kimlandService.getSessionStats();
    console.log('üìà Statistiques session:', sessionStats);

    console.log('\nüéâ Tous les tests termin√©s !');

  } catch (error) {
    console.error('‚ùå Erreur lors des tests:', error instanceof Error ? error.message : error);
    console.error('Stack trace:', error instanceof Error ? error.stack : 'N/A');
  } finally {
    // Nettoyage
    kimlandService.logout();
    console.log('üîê Session ferm√©e.');
  }
}

// Ex√©cution du test
if (require.main === module) {
  testKimlandAuthentication()
    .then(() => {
      console.log('Test termin√©.');
      process.exit(0);
    })
    .catch((error) => {
      console.error('Test √©chou√©:', error);
      process.exit(1);
    });
}

export { testKimlandAuthentication };