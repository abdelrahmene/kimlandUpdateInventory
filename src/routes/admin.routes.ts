import { Router, Request, Response } from 'express';
import { secureStoreService } from '../storage/secure-store.service';
import { logger } from '../utils/logger';
import { asyncHandler } from '../middleware/error.middleware';

const router = Router();

/**
 * üìä Obtenir les statistiques d'authentification
 */
router.get('/auth-stats', asyncHandler(async (req: Request, res: Response) => {
  try {
    const stats = await secureStoreService.getAuthStats();
    
    res.json({
      success: true,
      stats: {
        ...stats,
        storageLocation: 'Local Encrypted Files',
        encryptionMethod: 'AES-256-GCM',
        lastCleanup: new Date().toISOString()
      }
    });
    
  } catch (error) {
    logger.error('‚ùå Erreur stats auth', { error });
    res.status(500).json({
      success: false,
      error: 'Erreur lors de la r√©cup√©ration des statistiques'
    });
  }
}));

/**
 * üßπ Nettoyer les authentifications expir√©es
 */
router.post('/cleanup-auth', asyncHandler(async (req: Request, res: Response) => {
  try {
    const maxAgeMs = parseInt(req.query.maxAgeDays as string) || 30;
    const maxAgeMillis = maxAgeMs * 24 * 60 * 60 * 1000;
    
    const cleanedCount = await secureStoreService.cleanupExpiredAuth(maxAgeMillis);
    
    logger.info('üßπ Nettoyage auth termin√©', { cleanedCount, maxAgeDays: maxAgeMs });
    
    res.json({
      success: true,
      message: `${cleanedCount} authentifications expir√©es supprim√©es`,
      cleanedCount,
      maxAgeDays: maxAgeMs
    });
    
  } catch (error) {
    logger.error('‚ùå Erreur nettoyage auth', { error });
    res.status(500).json({
      success: false,
      error: 'Erreur lors du nettoyage'
    });
  }
}));

/**
 * üîç V√©rifier le statut d'une authentification sp√©cifique
 */
router.get('/auth-status/:shop', asyncHandler(async (req: Request, res: Response) => {
  const shop = req.params.shop;
  
  try {
    const authData = await secureStoreService.getShopAuth(shop);
    
    if (authData) {
      res.json({
        success: true,
        shop,
        isAuthenticated: authData.isValid,
        connectedAt: authData.connectedAt,
        lastUsed: authData.lastUsed,
        scope: authData.scope,
        appVersion: authData.appVersion,
        hasToken: !!authData.accessToken
      });
    } else {
      res.json({
        success: true,
        shop,
        isAuthenticated: false,
        message: 'Aucune authentification trouv√©e'
      });
    }
    
  } catch (error) {
    logger.error('‚ùå Erreur v√©rif auth', { shop, error });
    res.status(500).json({
      success: false,
      error: 'Erreur lors de la v√©rification'
    });
  }
}));

/**
 * üóëÔ∏è Supprimer une authentification sp√©cifique (admin)
 */
router.delete('/auth/:shop', asyncHandler(async (req: Request, res: Response) => {
  const shop = req.params.shop;
  
  // V√©rification de s√©curit√© basique (√† am√©liorer en production)
  const adminKey = req.headers['x-admin-key'] as string;
  if (adminKey !== process.env.ADMIN_KEY) {
    return res.status(403).json({
      success: false,
      error: 'Acc√®s non autoris√©'
    });
  }
  
  try {
    await secureStoreService.deleteShopAuth(shop);
    
    logger.info('üóëÔ∏è Auth supprim√©e par admin', { shop });
    
    res.json({
      success: true,
      message: `Authentification supprim√©e pour ${shop}`
    });
    
  } catch (error) {
    logger.error('‚ùå Erreur suppression auth admin', { shop, error });
    res.status(500).json({
      success: false,
      error: 'Erreur lors de la suppression'
    });
  }
}));

/**
 * üîÑ Migrer les authentifications de l'ancien syst√®me vers le nouveau
 */
router.post('/migrate-auth', asyncHandler(async (req: Request, res: Response) => {
  const adminKey = req.headers['x-admin-key'] as string;
  if (adminKey !== process.env.ADMIN_KEY) {
    return res.status(403).json({
      success: false,
      error: 'Acc√®s non autoris√©'
    });
  }
  
  try {
    const firebaseService = (await import('../services/firebase.service')).firebaseService;
    let migratedCount = 0;
    
    // Cette fonction devrait √™tre impl√©ment√©e pour r√©cup√©rer tous les shops depuis l'ancien syst√®me
    // Pour l'instant, on simule avec les shops qu'on trouve
    logger.info('üîÑ D√©but migration auth vers stockage s√©curis√©');
    
    res.json({
      success: true,
      message: 'Migration termin√©e (fonctionnalit√© √† impl√©menter compl√®tement)',
      migratedCount: migratedCount,
      note: 'La migration se fait automatiquement lors de la premi√®re utilisation de chaque shop'
    });
    
  } catch (error) {
    logger.error('‚ùå Erreur migration auth', { error });
    res.status(500).json({
      success: false,
      error: 'Erreur lors de la migration'
    });
  }
}));

export { router as adminRoutes };
